#!/usr/bin/env bash

export BOOTSTRAP_ROOT_DIR=$PWD

export PATH=$BOOTSTRAP_ROOT_DIR/bin:$PATH

export BOOTSTRAP_CONFIG_DIR=$BOOTSTRAP_ROOT_DIR/config

export BOOTSTRAP_TARGET_MOUNT_DIR=${BOOTSTRAP_TARGET_MOUNT_DIR:-/mnt/target}

: "${BOOTSTRAP_TARGET_DEVICE:?}"

unset partition_prefix

if [[ ${BOOTSTRAP_TARGET_DEVICE##*/} == nvme* ]]; then
    partition_prefix=p
fi

export BOOTSTRAP_BOOT_DEVICE=${BOOTSTRAP_BOOT_DEVICE:-${BOOTSTRAP_TARGET_DEVICE}${partition_prefix:-}1}
export BOOTSTRAP_SYS_DEVICE=${BOOTSTRAP_SYS_DEVICE:-${BOOTSTRAP_TARGET_DEVICE}${partition_prefix:-}2}
unset partition_prefix

if [[ ! -v BOOTSTRAP_BOOT_FIRMWARE ]]; then
    if [[ -d /sys/firmware/efi/efivars ]]; then
        export BOOTSTRAP_BOOT_FIRMWARE=uefi
    else
        export BOOTSTRAP_BOOT_FIRMWARE=bios
    fi
fi

boot_firmware_package_file=$BOOTSTRAP_CONFIG_DIR/packages/boot/$BOOTSTRAP_BOOT_FIRMWARE

if [[ ! -f $boot_firmware_package_file ]]; then
    printf "%s: invalid boot firmware: %s\n" "$0" "$BOOTSTRAP_BOOT_FIRMWARE" >&2
    return 2
fi

export BOOTSTRAP_BOOT_FIRMWARE_PACKAGE_FILE=$boot_firmware_package_file
unset boot_firmware_package_file

export BOOTSTRAP_PART_BOOT_NAME=${BOOTSTRAP_PART_BOOT_NAME:-boot}

case $BOOTSTRAP_BOOT_FIRMWARE in
uefi)
    export BOOTSTRAP_PART_BOOT_TYPE=C12A7328-F81F-11D2-BA4B-00A0C93EC93B
    export BOOTSTRAP_PART_BOOT_SIZE=${BOOTSTRAP_PART_BOOT_SIZE:-100M}
    export BOOTSTRAP_UEFI_MOUNT_DIR=${BOOTSTRAP_UEFI_MOUNT_DIR:-/efi}
    ;;
bios)
    export BOOTSTRAP_PART_BOOT_TYPE=21686148-6449-6E6F-744E-656564454649
    export BOOTSTRAP_PART_BOOT_SIZE=${BOOTSTRAP_PART_BOOT_SIZE:-1M}
    ;;
esac

export BOOTSTRAP_PART_SYS_TYPE=0FC63DAF-8483-4772-8E79-3D69D8477DE4
export BOOTSTRAP_PART_SYS_NAME=${BOOTSTRAP_PART_SYS_NAME:-sys}
export BOOTSTRAP_PART_SYS_SIZE=${BOOTSTRAP_PART_SYS_SIZE:-+}

export BOOTSTRAP_LVM_DEVICE=$BOOTSTRAP_SYS_DEVICE
export BOOTSTRAP_LVM_VG_NAME=${BOOTSTRAP_LVM_VG_NAME:-sys}

export BOOTSTRAP_USE_SWAP=${BOOTSTRAP_USE_SWAP:-0}

if ((BOOTSTRAP_USE_SWAP)); then
    export BOOTSTRAP_LVM_LV_SWAP_NAME=${BOOTSTRAP_LVM_LV_SWAP_NAME:-swap}

    if [[ ! -v BOOTSTRAP_LVM_LV_SWAP_SIZE ]]; then
        if [[ -v BOOTSTRAP_MEMORY_SIZE ]]; then
            BOOTSTRAP_LVM_LV_SWAP_SIZE=$BOOTSTRAP_MEMORY_SIZE
        elif memory_size=$(print-memory-size); then
            BOOTSTRAP_LVM_LV_SWAP_SIZE=$memory_size
            unset memory_size
        else
            printf "unable to get information about physical memory\n" >&2
            return 1
        fi
        export BOOTSTRAP_LVM_LV_SWAP_SIZE
    fi

    export BOOTSTRAP_FS_SWAP_LABEL=${BOOTSTRAP_FS_SWAP_LABEL:-swap}
    export BOOTSTRAP_SWAP_DEVICE=/dev/mapper/$BOOTSTRAP_LVM_VG_NAME-$BOOTSTRAP_LVM_LV_SWAP_NAME
fi

export BOOTSTRAP_LVM_LV_ROOT_NAME=${BOOTSTRAP_LVM_LV_ROOT_NAME:-root}
export BOOTSTRAP_LVM_LV_ROOT_EXTENTS=${BOOTSTRAP_LVM_LV_ROOT_EXTENTS:-+100%FREE}

export BOOTSTRAP_FS_ROOT_LABEL=${BOOTSTRAP_FS_ROOT_LABEL:-root}
export BOOTSTRAP_ROOT_DEVICE=/dev/mapper/$BOOTSTRAP_LVM_VG_NAME-$BOOTSTRAP_LVM_LV_ROOT_NAME

export BOOTSTRAP_USE_LUKS=${BOOTSTRAP_USE_LUKS:-0}

if ((BOOTSTRAP_USE_LUKS)); then
    # TODO: Remove BOOTSTRAP_LUKS_PBKDF once grub supports luks2 default.
    # https://savannah.gnu.org/bugs/index.php?55093
    # https://wiki.archlinux.org/title/GRUB#LUKS2
    export BOOTSTRAP_LUKS_PBKDF=pbkdf2
    export BOOTSTRAP_LUKS_DEVICE=$BOOTSTRAP_SYS_DEVICE
    export BOOTSTRAP_LUKS_MAPPER_NAME=${BOOTSTRAP_LUKS_MAPPER_NAME:-sys}
    export BOOTSTRAP_LUKS_KEY_FILE=${BOOTSTRAP_LUKS_KEY_FILE:-/crypto_keyfile.bin}
    export BOOTSTRAP_LUKS_PASSPHRASE=${BOOTSTRAP_LUKS_PASSPHRASE:-hunter2}
    export BOOTSTRAP_LVM_DEVICE=/dev/mapper/$BOOTSTRAP_LUKS_MAPPER_NAME
fi

if [[ ! -v BOOTSTRAP_CPU_VENDOR ]]; then
    if ! cpu_vendor=$(print-cpu-vendor); then
        printf "unable to get cpu vendor\n" >&2
        return 1
    fi
    export BOOTSTRAP_CPU_VENDOR=$cpu_vendor
    unset cpu_vendor
fi

cpu_vendor_package_file=$BOOTSTRAP_CONFIG_DIR/packages/cpu/$BOOTSTRAP_CPU_VENDOR

if [[ ! -f $cpu_vendor_package_file ]]; then
    printf "%s: invalid cpu vendor: %s\n" "$0" "$BOOTSTRAP_CPU_VENDOR" >&2
    return 2
fi

export BOOTSTRAP_CPU_VENDOR_PACKAGE_FILE=$cpu_vendor_package_file
unset cpu_vendor_package_file

if [[ ! -v BOOTSTRAP_GPU_MODULES ]]; then
    if ! gpu_modules=$(print-gpu-modules | paste -sd' '); then
        printf "unable to get gpu kernel modules\n" >&2
        return 1
    fi
    export BOOTSTRAP_GPU_MODULES=$gpu_modules
    unset gpu_modules
fi

if [[ ! -v BOOTSTRAP_USE_TRIM ]]; then
    if is-rotational-disk "$BOOTSTRAP_TARGET_DEVICE"; then
        export BOOTSTRAP_USE_TRIM=0
    else
        export BOOTSTRAP_USE_TRIM=1
    fi
fi

if [[ ! -v BOOTSTRAP_USE_WIRELESS ]]; then
    if print-network-interfaces | grep -q '^wl'; then
        export BOOTSTRAP_USE_WIRELESS=1
    else
        export BOOTSTRAP_USE_WIRELESS=0
    fi
fi

export BOOTSTRAP_KERNEL_TOP_LEVEL=/boot/vmlinuz-linux${BOOTSTRAP_KERNEL_USE_LTS:+-lts}
export BOOTSTRAP_KERNEL_LOGLEVEL=${BOOTSTRAP_KERNEL_LOGLEVEL:-4}
export BOOTSTRAP_KERNEL_CONSOLEBLANK=${BOOTSTRAP_KERNEL_CONSOLEBLANK:-0}

export BOOTSTRAP_HOSTNAME=${BOOTSTRAP_HOSTNAME:-arch}

if [[ ! -v BOOTSTRAP_TIMEZONE ]]; then
    if ! timezone=$(print-timezone); then
        printf "unable to get time zone\n" >&2
        return 1
    fi
    export BOOTSTRAP_TIMEZONE=$timezone
    unset timezone
elif ! zdump "$BOOTSTRAP_TIMEZONE" &>/dev/null; then
    printf "%s: invalid timezone: %s\n" "$0" "$BOOTSTRAP_TIMEZONE" >&2
    return 2
fi

export BOOTSTRAP_KEYMAP=${BOOTSTRAP_KEYMAP:-us}
export BOOTSTRAP_LANG=${BOOTSTRAP_LANG:-en_US.UTF-8}

export BOOTSTRAP_MIRROR_SORT=${BOOTSTRAP_MIRROR_SORT:-age}
export BOOTSTRAP_MIRROR_LATEST=${BOOTSTRAP_MIRROR_LATEST:-5}
export BOOTSTRAP_MIRROR_COUNTRY=${BOOTSTRAP_MIRROR_COUNTRY:-US}

export BOOTSTRAP_ADMIN_LOGIN=${BOOTSTRAP_ADMIN_LOGIN:-admin}
export BOOTSTRAP_ADMIN_GROUP=${BOOTSTRAP_ADMIN_GROUP:-wheel}
export BOOTSTRAP_ADMIN_PASSWORD=${BOOTSTRAP_ADMIN_PASSWORD:-hunter2}
export BOOTSTRAP_ADMIN_GROUP_NOPASSWD=${BOOTSTRAP_ADMIN_GROUP_NOPASSWD:-0}
